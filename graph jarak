from itertools import permutations

class WeightedGraph:
    #initialization
    def _init_(self):
        self.cityList = {}

    def printGraph(self):
        for city in self.cityList:
            print(city, ":", self.cityList[city])

            for neighbor, distance in self.cityList[city].items():
                print("    ->", neighbor, ":", distance)

    def tambahkanKota(self, kota):
        if kota not in self.cityList:
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        if kotaDihapus in self.cityList:
            del self.cityList[kotaDihapus]
            for kota in self.cityList:
                if kotaDihapus in self.cityList[kota]:
                    del self.cityList[kota][kotaDihapus]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
        return False

    def dijkstra(self, source):
        
        distances = {}
        for city in self.cityList:
            distances[city] = float('inf')
distances[source] = 0
        print (distances)
        unvisited_cities = []
        for city in self.cityList:
            unvisited_cities.append(city)
        print (unvisited_cities)

        while unvisited_cities:
            min_distance = float('inf')
            closest_city = None
            for city in unvisited_cities:
                if distances[city] < min_distance:
                    min_distance = distances[city]
                    closest_city = city

            unvisited_cities.remove(closest_city)

            for neighbor, weight in self.cityList[closest_city].items():
                distance = distances[closest_city] + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance

        return distances
    
    def tsp(self):
        shortest_distance = float('inf')
        shortest_path = []

        cities = list(self.cityList.keys())
        for path in permutations(cities):
            total_distance = 0
            for i in range(len(path) - 1):
                if path[i] in self.cityList and path[i + 1] in self.cityList[path[i]]:
                    total_distance += self.cityList[path[i]][path[i + 1]]
                else:
                    total_distance = float('inf')
                    break  
            if total_distance < shortest_distance:
                shortest_distance = total_distance
                shortest_path = path

        return shortest_path, shortest_distance

petaKorea = WeightedGraph()
petaKorea.tambahkanKota("Kaesong")
petaKorea.tambahkanKota("Paju")
petaKorea.tambahkanKota("Chuncheon")
petaKorea.tambahkanKota("Goyang")
petaKorea.tambahkanKota("Seoul")
petaKorea.tambahkanKota("Incheon")
petaKorea.tambahkanKota("Suwon")
petaKorea.tambahkanKota("Yongin")
petaKorea.tambahkanKota("Namyangju")
petaKorea.tambahkanKota("Gangneung")
petaKorea.tambahkanKota("Wonju")
petaKorea.tambahkanKota("Seosan")
petaKorea.tambahkanKota("Sejong")
petaKorea.tambahkanKota("Daejeon")
petaKorea.tambahkanJalan("Kaesong","Paju", 15)
petaKorea.tambahkanJalan("Kaesong","Chuncheon", 20)
petaKorea.tambahkanJalan("Kaesong","Goyang", 5)
petaKorea.tambahkanJalan("Paju","Chuncheon", 20)
petaKorea.tambahkanJalan("Paju","Goyang", 20)
petaKorea.tambahkanJalan("Paju","Seoul", 5)
petaKorea.tambahkanJalan("Paju","Namyangju", 10)
petaKorea.tambahkanJalan("Chuncheon","Namyangju", 5)
petaKorea.tambahkanJalan("Chuncheon","Gangneung", 20)
petaKorea.tambahkanJalan("Goyang","Seoul", 15)
petaKorea.tambahkanJalan("Goyang","Incheon", 32)
petaKorea.tambahkanJalan("Goyang","Suwon", 30)
petaKorea.tambahkanJalan("Seoul","Suwon", 30)
petaKorea.tambahkanJalan("Seoul","Yongin", 42)
petaKorea.tambahkanJalan("Incheon","Suwon", 33)
petaKorea.tambahkanJalan("Incheon","Seosan", 78)
petaKorea.tambahkanJalan("Suwon","Yongin", 20)
petaKorea.tambahkanJalan("Suwon","Seosan", 74)
petaKorea.tambahkanJalan("Yongin","Seosan", 83)
petaKorea.tambahkanJalan("Yongin","Sejong", 73)
petaKorea.tambahkanJalan("Yongin","Daejeon", 20)
petaKorea.tambahkanJalan("Namyangju","Yongin", 10)
petaKorea.tambahkanJalan("Namyangju","Gangneung", 20)
petaKorea.tambahkanJalan("Namyangju","Wonju", 10)
petaKorea.tambahkanJalan("Namyangju","Daejeon", 50)
petaKorea.tambahkanJalan("Gangneung","Wonju", 10)
petaKorea.tambahkanJalan("Gangneung","Daejeon", 50)
petaKorea.tambahkanJalan("Wonju","Daejeon", 20)
petaKorea.tambahkanJalan("Seosan","Sejong", 10)
petaKorea.tambahkanJalan("Sejong","Daejeon", 5)

petaKorea.printGraph()
shortest_distances = petaKorea.dijkstra("Seoul")
print("Shortest distances from Seoul to other cities:")
for city, distance in shortest_distances.items():
    print(city, ":", distance,"KM")
shortest_path, shortest_distance = petaKorea.tsp()
print("Shortest TSP path:", shortest_path)
print("Shortest TSP distance:", shortest_distance)
